I"-<ul id="markdown-toc">
  <li><a href="#tcpudp概述" id="markdown-toc-tcpudp概述">TCP/UDP概述</a></li>
  <li><a href="#udp面向无连接" id="markdown-toc-udp面向无连接">UDP(面向无连接)</a></li>
  <li><a href="#tcp面向连接" id="markdown-toc-tcp面向连接">TCP(面向连接)</a></li>
</ul>

<h4 id="tcpudp概述">TCP/UDP概述</h4>

<p>在网络协议中，运输层中具有两个非常重要的协议，分别是TCP和UDP。对此，先简述一下运输层：</p>

<blockquote>
  <p>①从通信和信息处理的角度看，<strong>运输层向它上面的应用层提供通信服务</strong>，它属于面向通信部分的最高层，同时也是用户功能中的最低层。</p>

  <p>②从运输层角度看，<strong>通信的真正端点并不是主机而是主机中的进程</strong>。也就是说，端到端的通信是应用进程之间的通信。</p>
</blockquote>

<p>网络层和运输层有着明显的区别。<strong>网络层为主机之间提供逻辑通信，而运输层为应用进程之间提供端到端的逻辑通信</strong></p>

<hr />

<h4 id="udp面向无连接">UDP(面向无连接)</h4>

<p><strong>UDP概述</strong></p>

<p>用户数据报协议UDP只在IP的数据报服务之上增加了很少一点功能，这就是复用和分用的功能以及差错检测的功能。UDP的主要特点是：</p>

<p>(1)UDP是<strong>无连接的</strong>，即发送数据之前不需要建立连接（当然，发送数据结束时也没有连接可释放），因此减少了开销的发送数据之前的时延。</p>

<p>(2)UDP使用<strong>尽最大努力交付</strong>，即不保证可靠交付，因此主机不需要维持复杂的连接状态表（这里面有许多参数）</p>

<p>(3)UDP是<strong>面向报文</strong>的。发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，即不合并，也不拆分，而是**保留这些报文的边界如下图：</p>

<p><img src="/static/img/internet/2.jpg" alt="2" width="80%" /></p>

<p>(4)<strong>UDP没有拥塞控制</strong>，因此网络出现的拥塞不会使源主机的发送速率降低。这对某些实时应用是很重要的。因为一些实时应用（如IP电话、实时视频会议等）要求源主机以恒定的速率发送数据，并且允许在网络发送拥塞时丢失一些数据，但却不允许数据有太大的时延。UDP正好适合这种要求。</p>

<p>(5)<strong>UDP支持一对一、一对多、多对一和多对多的交互通信</strong>。</p>

<p>(6)<strong>UDP的首部开销小</strong>，只有8个字节，比TCP的20个字节的首部要短。</p>

<hr />

<p><strong>&lt;—–存在的问题—–&gt;</strong></p>

<p>虽然某些实时应用需要使用没有拥塞控制的UDP，当很多的源主机同时都向网络发送高速率的实时视频流时，网络就有可能发生拥塞，结果大家都无法正常接收。因此，不使用拥塞控制功能的UDP有可能会引起网络产生严重的拥塞问题。</p>

<hr />

<h4 id="tcp面向连接">TCP(面向连接)</h4>

<p>TCP(Transmission Control Protocol，传输控制协议)是面向连接的连接的协议。什么叫做面向连接呢？就是说你要与对方进行数据的传输时，那么你就要与对方建立一条连接，才能进行一个通信。TCP主要的特点是：</p>

<p>(1)<strong>TCP是面向连接的运输层协议</strong>。这就是说，应用程序在使用TCP协议之前，必须先建立TCP连接。在传送数据完毕后，必须释放已经建立的TCP连接。也就是说，应用进程之间的通信好像在“打电话”：通话前要先拨号建立连接，通话结束后要挂机释放连接。</p>

<p>(2)每一条TCP连接只能有两个<strong>端点(endpoint)</strong>，每一条TCP连接只能是点对点的（一对一）。</p>

<p>(3)TCP提供<strong>可靠交付</strong>的服务。通过TCP连接传送的数据，无差错、不丢失、不重复，并且按序到达。</p>

<p>(4)TCP提供<strong>全双工通信</strong>。TCP允许通信双方的应用进程在任何时候都能发送数据。TCP连接的两端都设有发送缓存和接收缓存，用来临时存放双向通信的数据。在发送时，应用程序把数据传送给TCP的缓存后，就可以做自己的事情，而TCP在合适的时候把数据发送出去。在接收时，TCP把接收到的数据存入缓存，上层的应用进程在合适的时候读取缓存中的数据。</p>

<p>(5)<strong>面向字节流</strong>。TCP中的<strong>“流(stream)”</strong> 指的是<strong>流入到进程或从进程流出的字节序列</strong>。“面向字节流”的含义是：虽然应用程序和TCP的交互是一次一个数据块（大小不等），但TCP把应用程序交下来的数据仅仅看成是一连串的<strong>无结构的字节流</strong>。TCP并不知道所传送的字节流的含义。并且TCP是不保证这些大小对应的关系。</p>

<p><img src="/static/img/internet/3.jpg" alt="3" width="80%" /></p>

<p>备注：TCP连接是一条<strong>虚连接</strong>（也就是<strong>逻辑连接</strong>），而不是一条真正的物理连接。TCP报文段先要传送到IP层，加上IP首部后，再传送到数据链路层。再加上数据链路层的首部和尾部后，才离开主机发送到物理链路。</p>

:ET