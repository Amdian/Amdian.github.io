I"7<ul id="markdown-toc">
  <li><a href="#javascript-作用域" id="markdown-toc-javascript-作用域">JavaScript 作用域</a>    <ul>
      <li><a href="#全局作用域global-scope" id="markdown-toc-全局作用域global-scope">全局作用域(Global Scope)</a></li>
      <li><a href="#局部作用域local-scope" id="markdown-toc-局部作用域local-scope">局部作用域(Local Scope)</a></li>
    </ul>
  </li>
  <li><a href="#作用域链scope-chain" id="markdown-toc-作用域链scope-chain">作用域链(Scope Chain)</a>    <ul>
      <li><a href="#代码优化" id="markdown-toc-代码优化">代码优化</a></li>
    </ul>
  </li>
  <li><a href="#参考资料" id="markdown-toc-参考资料">参考资料</a></li>
</ul>

<h2 id="javascript-作用域">JavaScript 作用域</h2>

<p>作用域就是变量与函数的可访问范围。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。</p>

<hr />

<h3 id="全局作用域global-scope">全局作用域(Global Scope)</h3>

<p>在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下 3 种情形拥有全局作用域。</p>

<ol>
  <li>最外层函数和在最外层函数外面定义的变量拥有全局作用域</li>
  <li>所有末定义直接赋值的变量自动声明为拥有全局作用域</li>
  <li>所有window对象的属性拥有全局作用域 <br />
 window对象的内置属性都拥有全局作用域，例如window.name、window.location、window.top等。</li>
</ol>

<h3 id="局部作用域local-scope">局部作用域(Local Scope)</h3>

<p>和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部，所有在一些地方也会看到有人把这种作用域称为函数作用域
。</p>

<hr />

<h2 id="作用域链scope-chain">作用域链(Scope Chain)</h2>

<p>在 JavaScript 中，函数也是对象，实际上，JavaScript 里一切都是对象。函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供 JavaScript 引擎访问的内部属性。其中一个内部属性是 [[Scope]]，由 ECMA-262 标准第三版定义，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。</p>

<ol>
  <li>在函数创建时，它的作用域链中会填入一个全局对象，该全局对象包含了所有全局变量。</li>
  <li>函数执行时会创建一个称为“运行期上下文(execution context)”的内部对象，运行期上下文定义了函数执行时的环境。每个运行期上下文都有自己的作用域链，用于标识符解析，当运行期上下文被创建时，而它的作用域链初始化为当前运行函数的[[Scope]]所包含的对象。</li>
  <li>这些值按照它们出现在函数中的顺序被复制到运行期上下文的作用域链中。它们共同组成了一个新的对象，叫“活动对象(activation object)”，该对象包含了函数的所有局部变量、命名参数、参数集合以及this，然后此对象会被推入作用域链的前端。</li>
  <li>当运行期上下文被销毁，活动对象也随之销毁。</li>
</ol>

<p>在函数执行过程中，每遇到一个变量，都会经历一次标识符解析过程以决定从哪里获取和存储数据。该过程从作用域链头部，也就是从活动对象开始搜索，查找同名的标识符，如果找到了就使用这个标识符对应的变量，如果没找到继续搜索作用域链中的下一个对象，如果搜索完所有对象都未找到，则认为该标识符未定义。函数执行过程中，每个标识符都要经历这样的搜索过程。</p>

<h3 id="代码优化">代码优化</h3>

<p>从作用域链的结构可以看出，在运行期上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。如上图所示，因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。</p>

<hr />

<h2 id="参考资料">参考资料</h2>

<ul>
  <li><a href="http://www.laruence.com/2009/05/28/863.html">鸟哥：Javascript作用域原理</a></li>
  <li><a href="http://www.cnblogs.com/lhb25/archive/2011/09/06/javascript-scope-chain.html">理解 JavaScript 作用域和作用域链</a></li>
</ul>
:ET