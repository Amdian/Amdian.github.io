I"<!-- PPT  108页 -->
<ul id="markdown-toc">
  <li><a href="#软件工程概述" id="markdown-toc-软件工程概述">软件工程概述</a></li>
  <li><a href="#软件生存周期" id="markdown-toc-软件生存周期">软件生存周期</a></li>
  <li><a href="#软件过程模型" id="markdown-toc-软件过程模型">软件过程模型</a></li>
  <li><a href="#软件开发方法" id="markdown-toc-软件开发方法">软件开发方法</a></li>
  <li><a href="#软件项目估算方法" id="markdown-toc-软件项目估算方法">软件项目估算方法</a></li>
</ul>

<h3 id="软件工程概述">软件工程概述</h3>

<p><br /></p>

<h3 id="软件生存周期">软件生存周期</h3>

<p>可行性分析与项目开发计划、需求分析、概要设计（选择系统解决方案，规划子系统）、详细设计（设计子系统内部具体实现）、编码、测试、维护。</p>

<hr />

<h3 id="软件过程模型">软件过程模型</h3>

<p><strong>瀑布模型（SDLC）</strong>：结构化方法中的模型，是结构化的开发，开发流程如同瀑布一般，一步一步走下去，直到完成项目开发，<font size="4" color="#800080">只适用于需求明确或者二次开发</font>（需求稳定），当需求不明确时，最终开发的项目会错误，有很大的缺陷。</p>

<p><strong>原型</strong>：与瀑布模型相反，原型针对的就是<font size="4" color="#800080">需求不明确</font>的情况，首先快速构造一个功能模型，演示给用户看，并按用户要求及时修改，中间再通过不断的演示与用户沟通，最终设计出项目，就不会出现与用户要求不符合的情况，采用的是迭代的思想。不适合超大项目开发。</p>

<p><strong>增量模型</strong>：首先开发核心模块功能，而后与用户确认，之后再开发次核心模块的功能，即每次开发一部分功能，并与用户需求确认，最终完成项目开发，优先级最高的服务最先交付，但由于并不是从系统整体角度规划各个模块，因此不利于模块划分。难点在于如何将客户需求划分为多个增量。与原型不同的是<font size="4" color="#800080">增量模型的每一次增量版本都可作为独立可操作的作品，而</font><font size="4" color="#800080">原型的构造一般是为了演示</font></p>

<p><strong>螺旋模型</strong>：是多种模型的混合，针对需求不明确的项目，与原型类似，但是<font size="4" color="#800080">增加了风险分析</font>，这也是其最大的特点。适合大型项目开发。</p>

<p><strong>V模型</strong>：特点是<font size="4" color="#800080">增加了很多轮测试</font>，并且这些测试贯穿于软件开发的各个阶段，不像其他模型都是软件开发完再测试，很大程序上保证了项目的准确性。V模型开发和测试级别对应如下图：</p>

<p><img src="/static/img/software_designer/20.jpg" alt="20" width="50%" /></p>

<p><strong>喷泉模型</strong>：特点是<font size="4" color="#800080">面向对象的模型</font>，而上述其他的模型都是结构化的模型，使用了迭代思想和无间隙开发。</p>

<p><strong>基于构件的开发模型CBSD</strong>：特点是<font size="4" color="#800080">增强的复用性</font>，在系统开发过程中，会构建一个<font size="4" color="#800080">构件库</font>供其他系统复用，因此可以提高可靠性，节省时间和成本。</p>

<p><strong>形式化方法模型</strong>：建立在严格<font size="4" color="#800080">数学基础</font>上的一种软件开发方法，主要活动是生成计算机软件形式化的数学规格说明。</p>

<hr />

<h3 id="软件开发方法">软件开发方法</h3>

<p><strong>结构化方法</strong>：流程固定，针对<font size="4" color="#800080">需求明确</font>的项目，自顶向下，逐层分解，面向数据流。将数据流映射为软件系统的模块结构，数据流类型包括变换流型和事务流型，不同类型的数据流有不同的映射方法。以瀑布模型为代表，一旦开发完成，将难以修改，不利于复用及后续版本的开发，现在被面向对象法给代替了。</p>

<p><strong>Jackson方法</strong>：面向数据结构的开发方法，适合于小规模的项目。</p>

<p><strong>原型方法</strong>：适合于<font size="4" color="#800080">需求不明确</font>的开发，以原型模型为代表。</p>

<p><strong>面向对象方法</strong>：<font size="4" color="#800080">强调复用性</font>，构建全面合理的模型，供不同项目使用，方便修改，节省开发时间和效率，增强复用性，以构建组装模型为代表。</p>

<p><strong>敏捷开发</strong>：针对中小型项目主要是为了给程序员减负，去掉一些不必要的会议和文档。指代一组模型（极限编程、自适应开发、水晶方法等），这些模型都具有相同的原则和价值观。</p>

<p>开发宣言：个体和交互 胜过 过程和工具、 可以工作的软件 胜过 面面俱到的文档、客户合作  胜过 合同谈判、 响应变化  胜过 遵循计划。</p>

<p>结对编程：一个程序员开发，</p>

<p>结对编程：</p>

<hr />

<h3 id="软件项目估算方法">软件项目估算方法</h3>

<p>码字中。。。。</p>
:ET