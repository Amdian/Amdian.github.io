I"`	<ul id="markdown-toc">
  <li><a href="#概述" id="markdown-toc-概述">概述</a></li>
  <li><a href="#事务特点" id="markdown-toc-事务特点">事务特点</a></li>
</ul>

<h4 id="概述">概述</h4>

<p>事务（Transaction）是并发控制的基本单位。所谓的事务，它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。</p>

<p>事务的开始与结束可以由用户显式地控制。如果用户没有显式地定义事务，则由DBMS按默认的规定自动划分事务。</p>

<h4 id="事务特点">事务特点</h4>

<p>事务具有原子性、一致性、独立性及持久性等特点。</p>

<p>(1)<strong>原子性(Atomicity)</strong>整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被 回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>

<p><strong>例子1</strong>：银行转账，从A账户转100元至B账户，分为两个步骤：</p>

<p>①从A账户减少100元</p>

<p>②转100元至B账户</p>

<p>这两步必须同时完成，要么都不完成。不可能A的钱转了，然后钱少了，但是B的钱却没有增多。</p>

<p><strong>例子2</strong>：银行取钱</p>

<p>①银行卡减款</p>

<p>②拿到现金</p>

<p>不可能银行卡减少了，而钱却没拿到。这两步必须同时完成，要么都不完成。</p>

<p>(2)<strong>一致性（Consistency）</strong>在事务开始之前和事务结束以后，数据库数据的一致性约束没有被破坏。 例如：现有完整性约束A+B=100，如果一个事务改变了A，那么必须得改变B，使得事务结束后依然满足A+B=100，否则事务失败。</p>

<p>(3)<strong>隔离性（Isolation）</strong>
数据库允许多个并发事务同时对数据进行读写和修改的能力，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。
例如：现有有个交易是从A账户转100元至B账户，在这个交易事务还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的。</p>
:ET