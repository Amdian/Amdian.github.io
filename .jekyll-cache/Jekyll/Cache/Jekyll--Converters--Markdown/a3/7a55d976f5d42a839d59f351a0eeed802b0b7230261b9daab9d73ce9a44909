I"	<ul id="markdown-toc">
  <li><a href="#http概念" id="markdown-toc-http概念">Http概念</a></li>
  <li><a href="#协议层" id="markdown-toc-协议层">协议层</a></li>
  <li><a href="#请求响应模型" id="markdown-toc-请求响应模型">请求响应模型</a></li>
  <li><a href="#http过程" id="markdown-toc-http过程">HTTP过程</a></li>
  <li><a href="#http缺点" id="markdown-toc-http缺点">HTTP缺点</a></li>
  <li><a href="#https概念" id="markdown-toc-https概念">HTTPS概念</a></li>
</ul>

<h4 id="http概念">Http概念</h4>

<blockquote>
  <p>引自维基百科HTTP:超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网的数据
通信的基础。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。通过HTTP或者HTTPS协议请求的资源由统一资源标识符（Uniform Resource Identifiers，.URI）来标识。</p>
</blockquote>

<hr />

<h4 id="协议层">协议层</h4>

<p>HTTP（HyperText Transfer Protocol），超文本传输协议，是一个基于TCP实现的应用层协议。</p>

<p><img src="/static/img/internet/16.jpg" alt="16" width="80%" /></p>

<hr />

<h4 id="请求响应模型">请求响应模型</h4>

<p>HTTP由请求和响应构成，是一个标准的客户端服务器模型（B/S）。HTTP协议永远都是客户端发起请求，服务器回送响应。见下图:</p>

<p><img src="/static/img/internet/17.jpg" alt="17" width="80%" /></p>

<p>HTTP是一个无状态的协议。无状态是指客户机（Web浏览器）和服务器之间不需要建立持久的连接，这意味着当一个客户端向服务器端发出请求，然后服务器返回响应(response)，连接就被关闭了，在服务器端不保留连接的有关信息.HTTP遵循请求(Request)/应答(Response)模型。客户机（浏览器）向服务器发送请求，服务器处理请求并返回适当的应答。所有HTTP连接都被构造成一套请求和应答。</p>

<hr />

<h4 id="http过程">HTTP过程</h4>

<p>一次HTTP操作称为一个事务，其工作整个过程如下：</p>

<p><strong>1. 地址解析</strong></p>

<p>如用客户端浏览器请求这个页面：localhost.com:8080/index.htm
从中分解出协议名、主机名、端口、对象路径等部分，对于我们的这个地址，解析得到的结果如下：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">协议名</span><span class="err">：</span><span class="n">http</span>
<span class="n">主机名</span><span class="err">：</span><span class="n">localhost</span><span class="o">.</span><span class="na">com</span>
<span class="n">端口</span><span class="err">：</span><span class="mi">8080</span>
<span class="n">对象路径</span><span class="err">：</span><span class="o">/</span><span class="n">index</span><span class="o">.</span><span class="na">htm</span>
</code></pre></div></div>
<p>复制代码在这一步，需要域名系统DNS解析域名localhost.com,得主机的IP地址。</p>

<p><strong>2. 封装HTTP请求数据包</strong></p>

<p>把以上部分结合本机自己的信息，封装成一个HTTP请求数据包</p>

<p><strong>3. 封装成TCP包，建立TCP连接（TCP的三次握手）</strong></p>

<p>在HTTP工作开始之前，客户机（Web浏览器）首先要通过网络与服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建Internet，即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能，才能进行更层协议的连接，因此，首先要建立TCP连接，一般TCP连接的端口号是80。这里是8080端口。</p>

<p><strong>4. 客户机发送请求命令</strong></p>

<p>建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可内容。</p>

<p><strong>5. 服务器响应</strong></p>

<p>服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。
实体消息是服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据</p>

<p><strong>6. 服务器关闭TCP连接</strong></p>

<p>一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">Connection:</span><span class="n">keep</span><span class="o">-</span><span class="n">alive</span>
</code></pre></div></div>
<p>复制代码TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p>

<hr />

<h4 id="http缺点">HTTP缺点</h4>

<p>• 通信使用明文，可能被窃听</p>

<p>• 不验证通信方的身份，可能遭遇伪装</p>

<p>• 无法证明报文的完整性，有可能遭遇篡改</p>

<hr />

<h4 id="https概念">HTTPS概念</h4>

:ET