I"8<ul id="markdown-toc">
  <li><a href="#暴力筛法" id="markdown-toc-暴力筛法">暴力筛法</a></li>
  <li><a href="#埃氏筛" id="markdown-toc-埃氏筛">埃氏筛</a></li>
  <li><a href="#欧拉筛" id="markdown-toc-欧拉筛">欧拉筛</a></li>
</ul>

<p>前言</p>

<p>普通的素数筛暴力的二重循环的算法时间复杂度是O(n^2)，用sqrt的话可以优化一下，算法时间复杂度可以提升一下，但是有时候遇到1e7的还是无法满足，时间就会超时。</p>

<p>埃氏筛的算法时间复杂度是O(nloglogn)。</p>

<p>欧拉筛的算法时间复杂度是O(n)。</p>

<h4 id="暴力筛法">暴力筛法</h4>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1">#include&lt;iostream&gt;</span>
<span class="c1">#include&lt;cmath&gt;</span>
<span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="n">int</span> <span class="n">isprime</span><span class="p">(</span><span class="n">int</span> <span class="n">n</span><span class="p">){</span> <span class="err">判断素数</span>
    <span class="n">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="n">n</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="err">不是素数</span>    
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span><span class="err">是素数</span>
<span class="p">}</span>

<span class="n">void</span> <span class="n">prime</span><span class="p">(</span><span class="n">int</span> <span class="n">n</span><span class="p">){</span>  <span class="err">寻找素数</span>
    <span class="n">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="n">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="n">j</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s2">" "</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>用sqrt优化后的</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1">#include&lt;iostream&gt;</span>
<span class="c1">#include&lt;cmath&gt;</span>
<span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">int</span> <span class="n">isprime</span><span class="p">(</span><span class="n">int</span> <span class="n">n</span><span class="p">){</span>  <span class="err">判断素数</span>
    <span class="n">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">);</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="n">n</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>  <span class="err">不是素数</span>    
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span><span class="err">是素数</span>
<span class="p">}</span>

<span class="n">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<hr />

<h4 id="埃氏筛">埃氏筛</h4>
<p>原理：首先将2到n范围内的整数记录下来。其中2是最小的素数，将表中所有2的倍数划去，表中剩下的最小数字就是3，它不能被更小的数整除了，所以3个素数，然后再将表中所有3的倍数都划去…..以此类推（如果表中剩余的最小数是m，那么m就是素数，然后将表中所有m的倍数都划去），反复操作，就能依次枚举n以内的素数。</p>

<p>例如：求1~20之内的素数</p>

<p>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</p>

<p>第一趟：从2开始，将2的倍数划去，</p>

<p>2 3 5 7 9 11 13 15 17 19</p>

<p>第二趟：从3开始，将3的倍数划去</p>

<p>2 3 5 7 11 13 17 19</p>

<p>……..</p>

<p>后面的只要是素数的就不会进行操作，直接跳过，一开始时初始化默认全是素数。</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1">#include&lt;iostream&gt;</span>
<span class="c1">#include&lt;cmath&gt;</span>
<span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">int</span> <span class="n">visit</span><span class="p">[</span><span class="n">maxn</span><span class="p">];</span>
<span class="n">void</span> <span class="no">Prime</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="n">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxn</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="err">进行初始化，都是素数，值</span><span class="o">=</span><span class="mi">0</span><span class="err">是素数</span><span class="p">,</span><span class="err">值</span><span class="o">=</span><span class="mi">1</span><span class="err">不是素数</span>
    <span class="p">{</span>
        <span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">visit</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">visit</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="mi">0</span><span class="err">和</span><span class="mi">1</span><span class="err">不是素数</span>
    <span class="k">for</span><span class="p">(</span><span class="n">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">maxn</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">/</span><span class="sr">/如果是素数
        {
            for(int j=i*i;j &lt;= maxn;j+=i) 进行循环把后面的倍数都划去
            {
                visit[j]=1;
            }
        }
    }
}
int main()
{
    
    return 0;
}</span></code></pre></figure>

<hr />

<h4 id="欧拉筛">欧拉筛</h4>
<p>原理：在埃氏筛法的基础上，让每个合数只被它的最小质因子筛选一次，以达到不重复的目的</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1">#include&lt;iostream&gt;</span>
<span class="c1">#include&lt;cmath&gt;</span>
<span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">int</span> <span class="n">prime</span><span class="p">[</span><span class="n">maxn</span><span class="p">];</span>  <span class="n">prime</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="err">可以用来计数，也可以额外定义一个来计数</span>
<span class="n">int</span> <span class="n">visit</span><span class="p">[</span><span class="n">maxn</span><span class="p">];</span>

<span class="n">void</span> <span class="no">Prime</span><span class="p">(){</span>
    <span class="k">for</span><span class="p">(</span><span class="n">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxn</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="err">进行初始化，都是素数，值</span><span class="o">=</span><span class="mi">0</span><span class="err">是素数</span><span class="p">,</span><span class="err">值</span><span class="o">=</span><span class="mi">1</span><span class="err">不是素数</span> 
    <span class="p">{</span>
        <span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="n">prime</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="n">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">maxn</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="err">记录素数</span>
        <span class="p">{</span>
            <span class="n">prime</span><span class="p">[</span><span class="o">++</span><span class="n">prime</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span> <span class="err">同时存找到的素数</span>
        <span class="p">}</span>
        <span class="k">for</span><span class="p">(</span><span class="n">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">prime</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="n">i</span><span class="o">*</span><span class="n">prime</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">maxn</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">visit</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="n">prime</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="n">prime</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p><img src="/static/img/algorithm/1.jpg" alt="1" width="70%" /></p>
:ET