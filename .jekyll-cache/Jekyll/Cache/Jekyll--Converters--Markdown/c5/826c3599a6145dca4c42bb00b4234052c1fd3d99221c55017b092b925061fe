I"C
<ul id="markdown-toc">
  <li><a href="#redis-事务的基本使用" id="markdown-toc-redis-事务的基本使用">Redis 事务的基本使用</a></li>
  <li><a href="#原子性" id="markdown-toc-原子性">原子性</a></li>
</ul>

<h4 id="redis-事务的基本使用">Redis 事务的基本使用</h4>

<p>每个事务的操作都有 begin、commit 和 rollback，begin 指示事务的开始，commit 指示事务的提交，rollback 指示事务的回滚。它大致的形式如下。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">begin</span><span class="o">();</span>
<span class="k">try</span> <span class="o">{</span>
 <span class="n">command1</span><span class="o">();</span>
 <span class="n">command2</span><span class="o">();</span>
 <span class="o">....</span>
 <span class="n">commit</span><span class="o">();</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
 <span class="n">rollback</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Redis 在形式上看起来也差不多，分别是 multi/exec/discard。multi 指示事务的开始，exec 指示事务的执行，discard 指示事务的丢弃。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="n">multi</span>
<span class="no">OK</span>
<span class="o">&gt;</span> <span class="n">incr</span> <span class="n">books</span>
<span class="no">QUEUED</span>
<span class="o">&gt;</span> <span class="n">incr</span> <span class="n">books</span>
<span class="no">QUEUED</span>
<span class="o">&gt;</span> <span class="n">exec</span>
<span class="o">(</span><span class="n">integer</span><span class="o">)</span> <span class="mi">1</span>
</code></pre></div></div>

<p>上面的指令演示了一个完整的事务过程，所有的指令在 exec 之前不执行，而是缓存在服务器的一个事务队列中，服务器一旦收到 exec 指令，才开执行整个事务队列，执行完毕后一次性返回所有指令的运行结果。因为 Redis 的单线程特性，它不用担心自己在执行队列的时候被其它指令打搅，可以保证他们能得到的「原子性」执行。</p>
<p>上图显示了以上事务过程完整的交互效果。QUEUED 是一个简单字符串，同 OK 是一个形式，它表示指令已经被服务器缓存到队列里了。</p>

<h4 id="原子性">原子性</h4>

:ET