I"!<ul id="markdown-toc">
  <li><a href="#概念" id="markdown-toc-概念">概念</a></li>
  <li><a href="#代码实现" id="markdown-toc-代码实现">代码实现</a></li>
</ul>

<h4 id="概念">概念</h4>

<p>在数论中，对于正整数n，欧拉函数是小于或等于n的正整数中与n互质的数的个数(所以会得出一个结论φ(1)=1)，又例如φ(8)=4，因为在1~8的正整数中，唯有1,3,5,7均和8是互为质子数的，数目只有4个。</p>

<p>内容
欧拉函数的通式：<img src="/static/img/algorithm/2.jpg" alt="2" width="14%" />（其中p1，p2，……pn为x的所有质因数，x是不为0的整数）</p>

<p>定义φ(1)=1，因为在小于等于1的范围里面，和1互质的只有1本身。</p>

<p>通式的例子：φ(10)=10×(1-1/2)×(1-1/5)=4, ——–10的质因数有2,5</p>

<p>φ(30)=30×(1-1/2)×(1-1/3)×(1-1/5)=8，——–30的质因数有2,3,5</p>

<p>φ(49)=49×(1-1/7)=42;——–49的质因数只有7</p>

<p><strong>Attention</strong>！每种质因数只有一个</p>

<p>结论1：若n是质数p的k次幂，则，<img src="/static/img/algorithm/3.jpg" alt="3" width="22%" />，因为除了P的倍数外，其他数都是跟n互质的</p>

<p>例如：12=2 * 2 * 3那么<img src="/static/img/algorithm/4.jpg" alt="4" width="40%" /></p>

<p>欧拉函数是<a href="https://baike.baidu.com/item/%E7%A7%AF%E6%80%A7%E5%87%BD%E6%95%B0">积性函数</a>——若m,n互质，φ(mn)=φ(m)φ(n)</p>

<p>特殊性质：当n为奇质数时，φ(2n)=φ(n), 证明与上述类似。</p>

<p>若n为质数则φ(n)=n-1</p>

<p><strong>补充</strong></p>

<p>☞ 12=2 * 2 * 3，这里的2、2、3都是12的因数，而2和3都是质数，因此把2、3、3叫做12的质因数。假如12=2 * 6，这里的2、6都是12的因素，但是2是质数，而6是合数。因此2可以称作12的质因数，但是6就不能。</p>

<p>同余定理：</p>

<p>如果 a mod b = c 则有(a+kb) mod b =c(k为非0整数)</p>

<p>如果 a mod b = c 则有(ka) mod b =kc (k为正整数)</p>

<p>(a+b) mod c =((a mod c)+(b mod c )) mod c;</p>

<p>(a * b) mod c=((a mod c) * (b mod c)) mod c</p>

<hr />

<h4 id="代码实现">代码实现</h4>

<p>例1：直接求小于或等于n,且与n互质的个数（只要求一个数的欧拉函数值，那么直接根据定义质因数分解的同时求就好了）</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">int</span> <span class="no">Euler</span><span class="p">(</span><span class="n">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>    
    <span class="n">int</span> <span class="n">ans</span><span class="o">=</span><span class="n">n</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">);</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>       
        <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">%</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>       
        <span class="p">{</span>           
            <span class="n">ans</span><span class="o">=</span><span class="n">ans</span><span class="o">/</span><span class="n">i</span><span class="o">*</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="sr">//</span><span class="err">先进行除法防止溢出</span><span class="p">(</span><span class="n">ans</span><span class="o">=</span><span class="n">ans</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="n">pi</span><span class="p">))</span>           
            <span class="k">while</span><span class="p">(</span><span class="n">n</span><span class="o">%</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
            <span class="p">{</span>               
                <span class="n">n</span><span class="o">/=</span><span class="n">i</span><span class="p">;</span>
            <span class="p">}</span>    
        <span class="p">}</span> 
    <span class="p">}</span>    
    <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
         <span class="n">ans</span><span class="o">=</span><span class="n">ans</span><span class="o">/</span><span class="n">n</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
     <span class="p">}</span>
     <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>筛选模板:求[1,n]之间每个数的质因数的个数</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1">#define size 1000001</span>
<span class="n">int</span> <span class="n">euler</span><span class="p">[</span><span class="n">size</span><span class="p">];</span>
<span class="n">void</span> <span class="no">Init</span><span class="p">()</span>
<span class="p">{</span>    
    <span class="n">memset</span><span class="p">(</span><span class="n">euler</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">sizeof</span><span class="p">(</span><span class="n">euler</span><span class="p">));</span>    
    <span class="n">euler</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>    
    <span class="k">for</span><span class="p">(</span><span class="n">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
   <span class="err">｛</span>       
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">euler</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
      <span class="err">｛</span>             
            <span class="k">for</span><span class="p">(</span><span class="n">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="p">;</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span><span class="n">j</span><span class="o">+=</span><span class="n">i</span><span class="p">)</span>          
            <span class="p">{</span>              
                 <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">euler</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
                <span class="err">｛</span>                
                     <span class="n">euler</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">j</span><span class="p">;</span>        
                     <span class="n">euler</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">euler</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">/</span><span class="n">i</span><span class="o">*</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="sr">//</span><span class="err">先进行除法是为了防止中间数据的溢出</span>
                <span class="err">｝</span>          
            <span class="p">}</span>
       <span class="err">｝</span>
    <span class="err">｝</span>
<span class="p">}</span></code></pre></figure>

<p>附图：</p>

<p><img src="/static/img/algorithm/4.jpg" alt="4" width="40%" /></p>
:ET